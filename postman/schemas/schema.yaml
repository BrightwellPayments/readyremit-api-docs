openapi: 3.0.0
info:
  version: '1.0'
  title: 'Transfer'
servers:
  - url: 'localhost:3000'
paths:
    /transfer/ping:
      get:
          summary: 'Checks availability of the API'
          responses:
              '200':
                description: 'Success'
    /transfer/health:
      get:
          summary: 'Check the health of the API and all dependencies'
          responses:
              '200':
                description: 'Success'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/health'
    /transfer/options/countriescurrencies:
      get:
        summary: 'Gets a list of countries with currencies that are available for remittance.'
        responses:
          '200':
            description: 'Success'
            content:
              application/json:
                schema:
                  type: array
                  items: 
                    type: object
                    required:
                        - country
                        - currencies
                    properties:
                        country: 
                            type: object
                            $ref: '#/components/schemas/country'
                        currencies:
                            type: array
                            items:
                                $ref: '#/components/schemas/currency'
                examples:
                    small_list:
                        summary: Returns two countries with 
                        value: [
                            { 
                                "country": {
                                    "name": "United States of America",
                                    "iso3Code": "USA",
                                },
                                "currencies": [
                                    {
                                        "name": "US Dollar",
                                        "iso3Code": "USD",
                                        "symbol": "$",
                                        "decimalPlaces": 2
                                    }
                                ]
                            },
                            {
                                "country": {
                                    "name": "Philippines",
                                    "iso3Code": "PHL",
                                },
                                "currencies": [
                                    {
                                        "name": "Philipine Peso",
                                        "iso3Code": "PHL",
                                        "symbol": "â‚±",
                                        "decimalPlaces": 2
                                    },
                                    {
                                        "name": "US Dollar",
                                        "iso3Code": "USD",
                                        "symbol": "$",
                                        "decimalPlaces": 2
                                    }
                                ]
                            }
                        ]
          '500':
              description: 'Server error'
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/errorPayload'
                  examples:
                    server_error:
                      summary: 'Server error'
                      value: {
                          "errors": [{
                              "message": "It's all broked up",
                              "description": "Example of a 500 exception",
                              "code": "RR500"
                          }]
                      }
    /transfer/quotes:
        post:
            summary: 'Get a transfer quote given a corridor and amount'
            requestBody:
                description: Quotes payload
                content: 
                    'application/json':
                        schema:
                            type: object
                            required:
                                - dstCountryIso3Code
                                - dstCurrencyIso3Code
                                - srcCurrencyIso3Code
                                - transferMethod
                                - quoteBy
                                - amount
                            properties:
                                dstCountryIso3Code:
                                    type: string
                                    maxLength: 3
                                    minLength: 3
                                    pattern: '^[A-Z]{3}$'
                                dstCurrencyIso3Code:
                                    type: string
                                    maxLength: 3
                                    minLength: 3
                                    pattern: '^[A-Z]{3}$'
                                srcCurrencyIso3Code:
                                    type: string
                                    maxLength: 3
                                    minLength: 3
                                    pattern: '^[A-Z]{3}$'
                                transferMethod:
                                    type: string
                                    enum:
                                        - 'BANK_ACCOUNT'
                                        - 'CASH_PICKUP'
                                quoteBy:
                                    type: string
                                    enum:
                                        - 'SEND_AMOUNT'
                                        - 'RECEIVE_AMOUNT'
                                amount:
                                    type: integer
                                    minimum: 1
            responses:
                '200':
                    description: 'Success'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/quote'
                            examples:
                                rates:
                                    summary: Returns two countries with 
                                    value: [
                                        {
                                            "sendAmount": {
                                                "value": 510500,
                                                "currency": {
                                                    "name": "United States Dollar",
                                                    "iso3Code": "USD",
                                                    "symbol": "$",
                                                    "decimalPlaces": 2
                                                }
                                            },
                                            "receiveAmount": {
                                                "value": 744599,
                                                "currency": {
                                                    "name": "United States Dollar",
                                                    "iso3Code": "INR",
                                                    "symbol": "$",
                                                    "decimalPlaces": 0
                                                }
                                            },
                                            "rate": 12312,
                                            "adjustments": [
                                                {
                                                    "label": "Transfer Fee",
                                                    "amount": {
                                                        "value": 29900,
                                                        "currency": {
                                                            "name": "United States Dollar",
                                                            "iso3Code": "USD",
                                                            "symbol": "$",
                                                            "decimalPlaces": 2
                                                        }
                                                    }
                                                }
                                            ],
                                            "totalCost": {
                                                "value": 1029900,
                                                "currency": {
                                                    "name": "United States Dollar",
                                                    "iso3Code": "USD",
                                                    "symbol": "$",
                                                    "decimalPlaces": 2
                                                }
                                            },
                                            "disclosures": [],
                                            "nextStep": {
                                                "type": "RECIPIENT_DETAILS",
                                                "title": "Recipient Details"
                                            }
                                        }
                                    ]
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
                            examples:
                                server_error:
                                    summary: 'Server error'
                                    value: {
                                        "errors": [{
                                            "message": "It's all broked up",
                                            "description": "Example of a 500 exception",
                                            "code": "RR500"
                                        }]
                                    }
    /transfer/sender/fields:
        post:
            summary: 'Get a list of required fields for creating or updating a Sender record for a given corridor.'
            requestBody:
                description: Corridor passed in to get required fields
                content: 
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/corridor'
            responses:
                '200':
                    description: 'Success'
                    content: 
                        'application/json':
                            schema:
                                type: object
                                required:
                                    - required
                                    - fieldSets
                                properties:
                                    required:
                                        type: boolean
                                    fieldSets:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/fieldSet'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
    /transfer/sender:
        post:
            summary: 'Create a sender record. Only the minimum required fields will be validated outside the context of a corridor.'
            requestBody:
                description: List of fields to create the sender
                content: 
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/fieldValue'
            responses:
                '200':
                    description: 'Success'
                    content: 
                        'application/json':
                            schema:
                                type: object
                                $ref: '#/components/schemas/sender'
                '400':
                    description: 'Invalid or missing data'
                    content:
                        'application/json':
                            schema:
                                type: object
                                required:
                                    - fieldSets
                                properties:
                                    fieldSets:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/fieldSet'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
        put:
            summary: 'Update a sender record. Only the minimum required fields will be validated outside the context of a corridor.'
            requestBody:
                description: List of fields to update the sender
                content: 
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/fieldValue'
            responses:
                '200':
                    description: 'Success'
                    content: 
                        'application/json':
                            schema:
                                type: object
                                $ref: '#/components/schemas/sender'
                '400':
                    description: 'Invalid or missing data'
                    content:
                        'application/json':
                            schema:
                                type: object
                                required:
                                    - fieldSets
                                properties:
                                    fieldSets:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/fieldSet'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
    /transfer/sender/{id}:
        parameters:
        - name: id
          in: path
          required: true
          description: the sender identifier
          schema:
            type: string
        delete:
            summary: 'Deletes a sender record'
            responses:
                200:
                    description: '200 Success'
    /transfer/recipient/fields:
        post:
            summary: 'Get a list of required fields for creating or updating a Recipient record for a given corridor.'
            requestBody:
                description: Corridor passed in to get required fields
                content: 
                    'application/json':
                        schema:
                            allOf:
                            - type: object
                              $ref: '#/components/schemas/corridor'
                            - type: object 
                              properties:
                                recipientType:
                                    type: string
                                    enum:
                                    - MYSELF
                                    - SOMEONE_ELSE
                                    - BUSINESS
            responses:
                '200':
                    description: 'Success'
                    content: 
                        'application/json':
                            schema:
                                type: object
                                required:
                                    - required
                                    - fieldSets
                                properties:
                                    required:
                                        type: boolean
                                    fieldSets:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/fieldSet'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
    /transfer/recipient:
        post:
            summary: 'Create a recipient record. Only the minimum required fields will be validated outside the context of a corridor.'
            requestBody:
                description: List of fields to create the recipient
                content: 
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/fieldValue'
            responses:
                '200':
                    description: 'Success'
                    content: 
                        'application/json':
                            schema:
                                type: object
                                $ref: '#/components/schemas/recipient'
                '400':
                    description: 'Invalid or missing data'
                    content:
                        'application/json':
                            schema:
                                type: object
                                required:
                                    - fieldSets
                                properties:
                                    fieldSets:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/fieldSet'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
        put:
            summary: 'Update a recipient record. Only the minimum required fields will be validated outside the context of a corridor.'
            requestBody:
                description: List of fields to update the recipient
                content: 
                    'application/json':
                        schema:
                            type: array
                            items:
                                $ref: '#/components/schemas/fieldValue'
            responses:
                '200':
                    description: 'Success'
                    content: 
                        'application/json':
                            schema:
                                type: object
                                $ref: '#/components/schemas/recipient'
                '400':
                    description: 'Invalid or missing data'
                    content:
                        'application/json':
                            schema:
                                type: object
                                required:
                                    - fieldSets
                                properties:
                                    fieldSets:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/fieldSet'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
    /transfer/recipient/{id}:
        parameters:
        - name: id
          in: path
          required: true
          description: the recipient identifier
          schema:
            type: string
        delete:
            summary: 'Deletes a recipient record'
            responses:
                200:
                    description: '200 Success'
    /transfer/options/countriescurrencies/{countryIso3Code}/{currencyIso3Code}/banks:
        get:
            summary: 'Get a list of destination banks available for the given country currency'
            parameters:
              - in: path
                name: countryIso3Code
                schema:
                    type: string
                    maxLength: 3
                    minLength: 3
                    pattern: '^[A-Z]{3}$'
                required: true
                description: ISO code of destination country
              - in: path
                name: currencyIso3Code
                schema:
                    type: string
                    maxLength: 3
                    minLength: 3
                    pattern: '^[A-Z]{3}$'
                required: true
                description: ISO code of destination currency
            responses:
                '200':
                    description: 'Success'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/selection'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
    /transfer/options/countriescurrencies/banks/{bankId}/branches:
        get:
            summary: 'Get a list of bank branches given a bank'
            parameters:
              - in: path
                name: bankId
                schema:
                    type: string
                required: true
                description: ID of selected bank
            responses:
                '200':
                    description: 'Success'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/selection'
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
    /user:
        get:
            summary: 'User'
            responses:
                '200':
                    description: '200 Success'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    sourceCurrency:
                                        type: object
                                        $ref: '#/components/schemas/currency'
                            examples:
                                rates:
                                    summary: Returns two countries with 
                                    value: {
                                        "sourceCurrency": {
                                                "name": "United States Dollar",
                                                "iso3Code": "USD",
                                                "symbol": "$",
                                                "decimalPlaces": 2
                                        }
                                    }
                '500':
                    description: 'Server error'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorPayload'
                            examples:
                                server_error:
                                    summary: 'Server error'
                                    value: {
                                        "errors": [{
                                            "message": "It's all broked up",
                                            "description": "Example of a 500 exception",
                                            "code": "RR500"
                                        }]
                                    }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    selection:
        type: object
        required:
            - name
            - value
        properties:
            name:
                type: string
            value:
                type: string
    health:
        type: object
        required:
            - name
            - status
        properties:
            name:
                type: string
            status:
                type: string
                enum:
                    - AVAILABLE
                    - ERROR
            dependencies:
                type: array
                items:
                    $ref: '#/components/schemas/health'
    corridor:
        type: object
        required:
            - dstCountryIso3Code
            - dstCurrencyIso3Code
            - srcCurrencyIso3Code
            - transferMethod
        properties:
            dstCountryIso3Code:
                type: string
                maxLength: 3
                minLength: 3
                pattern: '^[A-Z]{3}$'
            dstCurrencyIso3Code:
                type: string
                maxLength: 3
                minLength: 3
                pattern: '^[A-Z]{3}$'
            srcCurrencyIso3Code:
                type: string
                maxLength: 3
                minLength: 3
                pattern: '^[A-Z]{3}$'
            transferMethod:
                type: string
                enum:
                    - 'BANK_ACCOUNT'
                    - 'CASH_PICKUP'
    country:
      type: object
      required:
        - name
        - iso3Code
      properties:
        name: 
          type: string
        iso3Code:
          type: string
          maxLength: 3
          minLength: 3
          pattern: '^[A-Z]{3}$'
    currency:
      type: object
      required:
        - name
        - iso3Code
        - symbol
        - decimalPlaces
      properties:
        name:
          type: string
        iso3Code:
          type: string
          maxLength: 3
          minLength: 3
          pattern: '^[A-Z]{3}$'
        symbol:
          type: string
          maxLength: 3
        decimalPlaces:
          type: integer
          minimum: 0
          maximum: 3
    money:
        type: object
        properties:
            value: 
                type: integer
                minimum: 0
            currency:
                type: object
                $ref: '#/components/schemas/currency'
    limit:
        type: object
        required:
            - amount
            - message
        properties:
            amount:
                type: object
                $ref: '#/components/schemas/money'
            message:
                type: string
    flowStep:
        type: object
        required:
            - type
            - title
        properties:
            type:
                type: string
            title:
                type: string
    adjustment:
        type: object
        required:
            - label
            - amount
        properties:
            label:
                type: string
            amount:
                type: object
                $ref: '#/components/schemas/money'
    quote:
        type: object
        required:
            - sendAmount
            - receiveAmount
            - rate
            - adjustments
            - totalCost
            - disclosures
        properties:
            sendAmount:
                type: object
                $ref: '#/components/schemas/money'
            receiveAmount:
                type: object
                $ref: '#/components/schemas/money'
            rate:
                type: integer
            adjustments:
                type: array
                items:
                    $ref: '#/components/schemas/adjustment'
            totalCost:
                type: object
                $ref: '#/components/schemas/money'
            disclosures:
                type: array
                items:
                    type: string
    fieldSet:
        type: object
        required:
            - id
            - name
            - fields
        properties:
            id:
                type: string
            name:
                type: string
            fields:
                type: array
                items:
                    oneOf:
                    - $ref: '#/components/schemas/textField'
    baseField:
        type: object
        required:
            - fieldType
            - name
            - id
            - required
            - validationErrors
        properties:
            fieldType: 
                type: string
                enum:
                    - 'TEXT'
            id:
                type: string
            name:
                type: string
            hintText:
                type: string
            required:
                type: boolean
            validationErrors:
                type: array
                items:
                    $ref: '#/components/schemas/error'
    textField:
        allOf:
            - $ref: '#/components/schemas/baseField'
            - type: object
              properties:
                placeholderText:
                    type: string
                minLength:
                    type: number
                maxLength:
                    type: number
                regex:
                    type: string
                value:
                    type: string
    fieldValue:
        type: object
        required: 
            - fieldId
            - fieldType
            - value
        properties:
            fieldId:
                type: string
            fieldType:
                type: string
                enum:
                    - 'TEXT'
            value:
                anyOf:
                    - $ref: '#/components/schemas/textFieldValue'
                    - $ref: '#/components/schemas/amountFieldValue'
    textFieldValue:
        type: string
    amountFieldValue:
        type: object
        required:
            - units
            - currencyIso3Code
        properties:
            units:
                type: number
            currencyIso3Code:
                type: string
                maxLength: 3
                minLength: 3
                pattern: '^[A-Z]{3}$'                      
    sender:
        type: object
        properties:
            id:
                type: number
            firstName:
                type: string
            lastName:
                type: string
            addressLine1:
                type: string
            addressLine2:
                type: string
            city:
                type: string
            stateProvince:
                type: string
    errorPayload:
        type: array
        items:
            $ref: '#/components/schemas/error'
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          pattern: '^[A-Z]{2}[0-9]{3}$'
          description: 'User facing error code that can be used to look up error details by support'
        message:
          type: string
          description: 'User facing error message'
        description:
          type: string
          description: 'Detailed explanation of the error meant for debugging'
security:
  - bearerAuth: []